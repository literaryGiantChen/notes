redis官网命令：https://www.redis.net.cn/order/3550.html

关闭 
    firewalld
        systemctl stop firewalld #临时关闭
        systemctl disable firewalld #永久关闭,即设置开机的时候不自动启动
    selinux
        [root@localhost html]# getenforce  #查看selinux状态
    Permissive
        [root@localhost html]# setenforce 0  #临时关闭
        [root@localhost html]# vim /etc/sysconfig/selinux  #永久关闭
        永久关闭selinux可以使用vi命令打开/etc/sysconfig/selinux 文件将SELINUX=(disable或permissive）

重启服务
    [root@localhost html]# shutdown -r now （或者reboot简单粗暴）。

附
    setenforce 1 设置SELinux 成为enforcing模式
    setenforce 0 设置SELinux 成为permissive模式

linux命令操作redis
    redis后台启动(推荐)
    进入redis文件目录下输入： cp redis.conf /etc/redis.conf       //将redis.conf复制到etc文件下
    进入etc文件目录下编辑文本
        linux编辑文本
            vi redis.conf        //进入文本
            快捷键：i           //进入insert模式
            编辑完后   shift+;  //命令输入
            在命令框中最底下有个 : 输入 wq! 回车

    进入安装文件目录下：cd /usr/local/bin (默认安装文件目录)  
         启动：redis-server /etc/redis.conf  
         查看进程：ps -ef | grep redis
         根目录启动redis：/usr/local/bin/redis-cli
    运行
         redis-server redis6380.conf
         redis-cli -p 6379
         info replication

docker容器
     sudo service docker start
     sudo service docker status
     sudo service docker stop

    启动生成redis容器
        docker run -p 6379:6379 -v /mydocker/myredis/data:/data -v /mydocker/myredis/conf/redis.conf:/usr/local/etc/redis/redis.conf  -d redis redis-server /usr/local/etc/redis/redis.conf --appendonly yes

    进入redis
        docker exec -it 容器ID redis-cli

    操作
        redis-cli -p 6379

Redis报错 : (error) NOAUTH Authentication required.     解决方法：输入命令 auth “密码”

Redis 键(key)
    keys * 查看当前库所有key    (匹配：keys *1)
    exists key判断某个key是否存在
    type key 查看你的key是什么类型
    del key       删除指定的key数据
    unlink key   根据value选择非阻塞删除
    仅将keys从keyspace元数据中删除，真正的删除会在后续异步操作。
    expire key 10   10秒钟：为给定的key设置过期时间
    ttl key 查看还有多少秒过期，-1表示永不过期，-2表示已过期
    select 命令切换数据库
    dbsize 查看当前数据库的key的数量
    flushdb 清空当前库
    flushall 通杀全部库

Redis字符串(String)
    set   <key><value>添加键值对
    get   <key>查询对应键值
    append  <key><value>将给定的<value> 追加到原值的末尾
    strlen  <key>获得值的长度
    setnx  <key><value>只有在 key 不存在时    设置 key 的值

    incr  <key>
             将 key 中储存的数字值增1
             只能对数字值操作，如果为空，新增值为1
    decr  <key>
             将 key 中储存的数字值减1
             只能对数字值操作，如果为空，新增值为-1
    incrby / decrby  <key><步长>将 key 中储存的数字值增减。自定义步长。

    mset  <key1><value1><key2><value2>  ..... 
    同时设置一个或多个 key-value对  
    mget  <key1><key2><key3> .....
    同时获取一个或多个 value  
    msetnx <key1><value1><key2><value2>  ..... 
    同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。
    原子性，有一个失败则都失败

    getrange  <key><起始位置><结束位置>
    获得值的范围，类似java中的substring，前包，后包
    setrange  <key><起始位置><value>
    用 <value>  覆写<key>所储存的字符串值，从<起始位置>开始(索引从0开始)。

    setex  <key><过期时间><value>
    设置键值的同时，设置过期时间，单位秒。
    getset <key><value>
    以新换旧，设置了新值同时获得旧值。

Redis列表(List)
    lpush/rpush  <key><value1><value2><value3> .... 从左边/右边插入一个或多个值。
    lpop/rpop  <key>从左边/右边吐出一个值。值在键在，值光键亡。
    rpoplpush  <key1><key2>从<key1>列表右边吐出一个值，插到<key2>列表左边。
    lrange <key><start><stop>
    按照索引下标获得元素(从左到右)
    lrange mylist 0 -1   0左边第一个，-1右边第一个，（0-1表示获取所有）
    lindex <key><index>按照索引下标获得元素(从左到右)
    llen <key>获得列表长度 
    linsert <key>  before <value><newvalue>在<value>的后面插入<newvalue>插入值
    lrem <key><n><value>从左边删除n个value(从左到右)
    lset<key><index><value>将列表key下标为index的值替换成value

Redis集合(Set)
    sadd <key><value1><value2> ..... 
    将一个或多个 member 元素加入到集合 key 中，已经存在的 member 元素将被忽略
    smembers <key>取出该集合的所有值。
    sismember <key><value>判断集合<key>是否为含有该<value>值，有1，没有0
    scard<key>返回该集合的元素个数。
    srem <key><value1><value2> .... 删除集合中的某个元素。
    spop <key>随机从该集合中吐出一个值。
    srandmember <key><n>随机从该集合中取出n个值。不会从集合中删除 。
    smove <source><destination>value把集合中一个值从一个集合移动到另一个集合
    sinter <key1><key2>返回两个集合的交集元素。
    sunion <key1><key2>返回两个集合的并集元素。
    sdiff <key1><key2>返回两个集合的差集元素(key1中的，不包含key2中的)

Redis哈希(Hash)
    hset <key><field><value>给<key>集合中的  <field>键赋值<value>
    hget <key1><field>从<key1>集合<field>取出 value 
    hmset <key1><field1><value1><field2><value2>... 批量设置hash的值
    hexists<key1><field>查看哈希表 key 中，给定域 field 是否存在。 
    hkeys <key>列出该hash集合的所有field
    hvals <key>列出该hash集合的所有value
    hincrby <key><field><increment>为哈希表 key 中的域 field 的值加上增量 1   -1
    hsetnx <key><field><value>将哈希表 key 中的域 field 的值设置为 value ，当且仅当域 field 不存在 .

Redis有序集合Zset(sorted set) 
    zadd  <key><score1><value1><score2><value2>…
    将一个或多个 member 元素及其 score 值加入到有序集 key 当中。
    zrange <key><start><stop>  [WITHSCORES]   
    返回有序集 key 中，下标在<start><stop>之间的元素
    带WITHSCORES，可以让分数一起和值返回到结果集。
    zrangebyscore key minmax [withscores] [limit offset count]
    返回有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员。有序集成员按 score 值递增(从小到大)次序排列。 
    zrevrangebyscore key maxmin [withscores] [limit offset count]               
    同上，改为从大到小排列。 
    zincrby <key><increment><value>      为元素的score加上增量
    zrem  <key><value>删除该集合下，指定值的元素 
    zcount <key><min><max>统计该集合，分数区间内的元素个数 
    zrank <key><value>返回该值在集合中的排名，从0开始。
        
加锁代码 
    public class RedisTool {
        private static final String LOCK_SUCCESS = "OK";
        private static final String SET_IF_NOT_EXIST = "NX";
        private static final String SET_WITH_EXPIRE_TIME = "PX";
        /**
         * 尝试获取分布式锁
         * @param jedis Redis客户端
         * @param lockKey 锁
         * @param requestId 请求标识
         * @param expireTime 超期时间
         * @return 是否获取成功
         */
        public static boolean tryGetDistributedLock(Jedis jedis, String lockKey, String requestId, int expireTime) {
            String result = jedis.set(lockKey, requestId, SET_IF_NOT_EXIST, SET_WITH_EXPIRE_TIME, expireTime);
            if (LOCK_SUCCESS.equals(result)) {
                return true;
            }
            return false;
        }
    }

    可以看到，我们加锁就一行代码：jedis.set(String key, String value, String nxxx, String expx, int time)，这个set()方法一共有五个形参：

    第一个为key，我们使用key来当锁，因为key是唯一的。

    第二个为value，我们传的是requestId，很多童鞋可能不明白，有key作为锁不就够了吗，为什么还要用到value？原因就是我们在上面讲到可靠性时，分布式锁要满足第四个条件解铃还须系铃人，通过给value赋值为requestId，我们就知道这把锁是哪个请求加的了，在解锁的时候就可以有依据。requestId可以使用UUID.randomUUID().toString()方法生成。

    第三个为nxxx，这个参数我们填的是NX，意思是SET IF NOT EXIST，即当key不存在时，我们进行set操作；若key已经存在，则不做任何操作；

    第四个为expx，这个参数我们传的是PX，意思是我们要给这个key加一个过期的设置，具体时间由第五个参数决定。

    第五个为time，与第四个参数相呼应，代表key的过期时间。

    总的来说，执行上面的set()方法就只会导致两种结果：1. 当前没有锁（key不存在），那么就进行加锁操作，并对锁设置个有效期，同时value表示加锁的客户端。2. 已有锁存在，不做任何操作。

    心细的童鞋就会发现了，我们的加锁代码满足我们可靠性里描述的三个条件。首先，set()加入了NX参数，可以保证如果已有key存在，则函数不会调用成功，也就是只有一个客户端能持有锁，满足互斥性。其次，由于我们对锁设置了过期时间，即使锁的持有者后续发生崩溃而没有解锁，锁也会因为到了过期时间而自动解锁（即key被删除），不会发生死锁。最后，因为我们将value赋值为requestId，代表加锁的客户端请求标识，那么在客户端在解锁的时候就可以进行校验是否是同一个客户端。由于我们只考虑Redis单机部署的场景，所以容错性我们暂不考虑。

解锁代码
    public class RedisTool {
        private static final Long RELEASE_SUCCESS = 1L;
        /**
         * 释放分布式锁
         * @param jedis Redis客户端
         * @param lockKey 锁
         * @param requestId 请求标识
         * @return 是否释放成功
         */
        public static boolean releaseDistributedLock(Jedis jedis, String lockKey, String requestId) {
            String script = "if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end";
            Object result = jedis.eval(script, Collections.singletonList(lockKey), Collections.singletonList(requestId));
            if (RELEASE_SUCCESS.equals(result)) {
                return true;
            }
            return false;
        }
    }
    可以看到，我们解锁只需要两行代码就搞定了！第一行代码，我们写了一个简单的Lua脚本代码，上一次见到这个编程语言还是在《黑客与画家》里，没想到这次居然用上了。第二行代码，我们将Lua代码传到jedis.eval()方法里，并使参数KEYS[1]赋值为lockKey，ARGV[1]赋值为requestId。eval()方法是将Lua代码交给Redis服务端执行。

    那么这段Lua代码的功能是什么呢？其实很简单，首先获取锁对应的value值，检查是否与requestId相等，如果相等则删除锁（解锁）。那么为什么要使用Lua语言来实现呢？因为要确保上述操作是原子性的。关于非原子性会带来什么问题，可以阅读【解锁代码-错误示例2】 。那么为什么执行eval()方法可以确保原子性，源于Redis的特性，简单来说，就是在eval命令执行Lua代码的时候，Lua代码将被当成一个命令去执行，并且直到eval命令执行完成，Redis才会执行其他命令。