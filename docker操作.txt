为什们使用
	更高效的利用系统资源、更快速的启动时间、一致的运行环境、持续交付和部署、更轻松的迁移、更轻松的维护和扩展

================================================================================================================================================================

docker使用教程：https://zhuanlan.zhihu.com/p/64004890
安装docker
	yum -y install gcc
	yum -y install gcc-c++
	1.安装底层工具
	sudo yum install ‐y yum‐utils device‐mapper‐persistent‐data lvm2
	2.加入阿里云yum仓库提速docker下载过程
	sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
	3.更新一下仓库的源信息
	sudo yum makecache fast
	4.自动安装下载Docker
	sudo yum remove docker \
	                  docker-client \
	                  docker-client-latest \
	                  docker-common \
	                  docker-latest \
	                  docker-latest-logrotate \
	                  docker-logrotate \
	                  docker-engine

	sudo yum -y install docker-ce
	5.启动Docker服务
	sudo service docker start 最后咱们来验证一下
	6.验证docker是否启动成功
	docker version

从应用软件的角度来看，Dockerfile、Docker镜像与Docker容器分别代表软件的三个不同阶段，
*  Dockerfile是软件的原材料
*  Docker镜像是软件的交付品
*  Docker容器则可以认为是软件的运行态。
Dockerfile面向开发，Docker镜像成为交付标准，Docker容器则涉及部署与运维，三者缺一不可，合力充当Docker体系的基石。

容器卷
	DockerFile添加
		# volume test
		FROM centos
		VOLUME ["/dataVolumeContainer1","/dataVolumeContainer2"]
		CMD echo "finished,--------success1"
		CMD /bin/bash

		docker build -t dc01 -f ./Dockerfile .
		docker run -it abc/centos

数据卷容器
	启动一个名为dc01的容器
	在dc02中创建数据
	docker run -it --name dc02 --volumes-from dc01 zzyy/centos
	查看宿主机默认数据卷目录
	docker inspect 容器ID


自定义镜像（dockerfile）

	# 基础镜像，当前新镜像是基于哪个镜像的
	FROM centos
	# 镜像维护者的姓名和邮箱地址
	MAINTAINER xixi<chenxixi@gamil.com>
	# 用来在构建镜像过程中设置环境变量
	ENV MYPATH /
	# 指定在创建容器后，终端默认登陆的进来工作目录，一个落脚点
	WORKDIR $NYPATH
	# 容器构建时需要运行的命令
	RUN yum -y install vim
	RUN yum -y install net-tools
	# 当前容器对外暴露出的端口
	EXPOSE 1314
	# 指定一个容器启动时要运行的命令 
	# Dockerfile 中可以有多个 CMD 指令，但只有最后一个生效，CMD 会被 docker run 之后的参数替换
	CMD /bin/bash

生成镜像： docker build -f 文件路径 -t 镜像名 （可以根据基础镜像来取名，如果在镜像名后面增加了 :版本号 ，在启动生成容器的时候要在镜像名后面加上版本号）

启动生成容器： docker run -it 镜像名/镜像ID 

删除镜像
docker rmi -f 镜像ID

删除容器
docker rm -f 容器ID

FROM centos
RUN yum install -y curl
# 指定一个容器启动时要运行的命令 ENTRYPOINT 的目的和 CMD 一样，都是在指定容器启动程序及参数
ENTRYPOINT ["curl","-s","-i","http://ip.cn"]

但是在启动的时候在最后面增加-i 他会追加到ENTRYPOINT参数中，不会像CMD覆盖掉文件初始化的数据

# 当构建一个被继承的Dockerfile时运行命令，父镜像在被子继承后父镜像的onbuild被触发
ONBUILD RUN echo "now, build action is ok ===="

===================================================================================

vim mytomcat9

FROM         centos
MAINTAINER    zzyy
#把宿主机当前上下文的c.txt拷贝到容器/usr/local/路径下
COPY c.txt /usr/local/cincontainer.txt
#把java与tomcat添加到容器中
ADD jdk-8u171-linux-x64.tar.gz /usr/local/
ADD apache-tomcat-9.0.8.tar.gz /usr/local/
#安装vim编辑器
RUN yum -y install vim
#设置工作访问时候的WORKDIR路径，登录落脚点
ENV MYPATH /usr/local
WORKDIR $MYPATH
#配置java与tomcat环境变量
ENV JAVA_HOME /usr/local/jdk1.8.0_171
ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
ENV CATALINA_HOME /usr/local/apache-tomcat-9.0.8
ENV CATALINA_BASE /usr/local/apache-tomcat-9.0.8
ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin
#容器运行时监听的端口
EXPOSE  8080
#启动时运行tomcat
# ENTRYPOINT ["/usr/local/apache-tomcat-9.0.8/bin/startup.sh" ]
# CMD ["/usr/local/apache-tomcat-9.0.8/bin/catalina.sh","run"]
CMD /usr/local/apache-tomcat-9.0.8/bin/startup.sh && tail -F /usr/local/apache-tomcat-9.0.8/bin/logs/catalina.out

FROM centos
MAINTAINER xixi
#把宿主机当前上下文的c.txt拷贝到容器/usr/local/路径下
COPY c.txt /usr/local/cincontainer.txt
#把java与tomcat添加到容器中
ADD jdk-8u221-linux-x64.tar.gz /usr/local/
ADD apache-tomcat-9.0.53.tar.gz /usr/local/
#安装vim编辑器
RUN yum -y install vim
#设置工作访问时候的WORKDIR路径，登录落脚点
ENV MYPATH /usr/local
WORKDIR $MYPATH
#配置java与tomcat环境变量
ENV JAVA_HOME /usr/local/jdk1.8.0_221
ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
ENV CATALINA_HOME /usr/local/apache-tomcat-9.0.53
ENV CATALINA_BASE /usr/local/apache-tomcat-9.0.53
ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin
#容器运行时监听的端口
EXPOSE  8281
#启动时运行tomcat
# ENTRYPOINT ["/usr/local/apache-tomcat-9.0.53/bin/startup.sh" ]
# CMD ["/usr/local/apache-tomcat-9.0.53/bin/catalina.sh","run"]
CMD /usr/local/apache-tomcat-9.0.53/bin/startup.sh && tail -F /usr/local/apache-tomcat-9.0.53/bin/logs/catalina.out

docker build -t mytomcat9 .

docker run -d -p 9080:8281 --name myt9 -v /mydocker/tomcat9/test:/usr/local/apache-tomcat-9.0.53/webapps/test -v /mydocker/tomcat9/tomcat9logs/:/usr/local/apache-tomcat-9.0.53/logs --privileged=true  mytomcat9

<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
    <display-name>test</display-name>
</web-app>

<%@ page contentType="text/html;charset=UTF-8" language="java" %>
	<html>
		<head>
		    <title>$Title$</title>
		</head>
	<body>
		$END$
	</body>
</html>

=======================================================================
启动生成容器
docker run -p 8983:3306 --name mysql -v /mydocker/mysql/conf:/etc/mysql/conf.d -v /mydocker/mysql/logs:/logs -v /mydocker/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql

命令说明：
-p 12345:3306：将主机的12345端口映射到docker容器的3306端口。
--name mysql：运行服务名字
-v /zzyyuse/mysql/conf:/etc/mysql/conf.d ：将主机/zzyyuse/mysql录下的conf/my.cnf 挂载到容器的 /etc/mysql/conf.d
-v /zzyyuse/mysql/logs:/logs：将主机/zzyyuse/mysql目录下的 logs 目录挂载到容器的 /logs。
-v /zzyyuse/mysql/data:/var/lib/mysql ：将主机/zzyyuse/mysql目录下的data目录挂载到容器的 /var/lib/mysql 
-e MYSQL_ROOT_PASSWORD=123456：初始化 root 用户的密码。
-d mysql:5.6 : 后台程序运行mysql5.6

docker exec -it MySQL运行成功后的容器ID     /bin/bash

连接：mysql -uroot -p123456

主机连接虚拟机上的docker上的mysql容器，连接不上，权限不够

alter user 'root'@'%' identified with mysql_native_password by 'root123';

FLUSH PRIVILEGES; 刷新权限

====================================================================
拉取docker hub中redis
docker pull redis

启动生成redis容器
docker run -p 6379:6379 -v /mydocker/myredis/data:/data -v /mydocker/myredis/conf/redis.conf:/usr/local/etc/redis/redis.conf  -d redis redis-server /usr/local/etc/redis/redis.conf --appendonly yes

进入redis
docker exec -it 容器ID redis-cli

====================================================================
将镜像推送到阿里云管理
$ docker login --username=diu1314 registry.cn-shenzhen.aliyuncs.com
$ docker tag [ImageId] registry.cn-shenzhen.aliyuncs.com/chenxixi/tomcat9.0:[镜像版本号]
$ docker push registry.cn-shenzhen.aliyuncs.com/chenxixi/tomcat9.0:[镜像版本号]

登录阿里云账号：diu1314
登录阿里云密码：GqUna7wx%o

删除本地镜像
docker rmi -f registry.cn-shenzhen.aliyuncs.com/chenxixi/tomcat9.0:1.1

从阿里云拉取镜像 docker pull registry.cn-shenzhen.aliyuncs.com/chenxixi/tomcat9.0:1.1

登陆错误
Error response from daemon: Get "https://registry.cn-shenzhen.aliyuncs.com/v2/": unauthorized: authentication required
修改固定密码

docker run --name my_tomcat2.0 -d -p 8382:8080 -v /mydocker/tomcat8382/webapps:/usr/local/tomcat/webapps tomcat:2.0
docker run --name my_tomcat1.0 -d -p 8383:8080 -v /mydocker/tomcat8383/webapps:/usr/local/tomcat/webapps tomcat:1.0
docker run --name my_tomcat3.0 -d -p 8384:8080 -v /mydocker/tomcat8384/webapps:/usr/local/tomcat/webapps tomcat:3.0


=======================================================================================================================
一

systemctl start docker

docker pull jenkins/jenkins:lts

docker run -p 8080:8080 -p 50000:5000 --name jenkins \
-u root \
-v /mydata/jenkins_home:/var/jenkins_home \
-d jenkins/jenkins:lts


二
下载：docker pull mysql

docker run -p 3306:3306 --name mysql \
-v /mydata/mysql/log:/var/log/mysql \
-v /mydata/mysql/data:/var/lib/mysql \
-v /mydata/mysql/conf:/etc/mysql \
-e MYSQL_ROOT_PASSWORD=root  \
-d mysql:5.7

参数说明
	-p 3306:3306：将容器的3306端口映射到主机的3306端口
	-v /mydata/mysql/conf:/etc/mysql：将配置文件夹挂在到主机
	-v /mydata/mysql/log:/var/log/mysql：将日志文件夹挂载到主机
	-v /mydata/mysql/data:/var/lib/mysql/：将数据文件夹挂载到主机
	-e MYSQL_ROOT_PASSWORD=root：初始化root用户的密码

进入运行MySQL的docker容器：docker exec -it mysql /bin/bash

使用MySQL命令打开客户端：mysql -uroot -proot --default-character-set=utf8

================================================================================================================================================================

面试题：
	缓存穿透攻击是指恶意用户在短时内大量查询不存在的数据，导致大量请求被送达数据库进行查询，当请求数据量超过数据库负载上线时，使系统相应出现高延迟甚至瘫痪的攻击行为